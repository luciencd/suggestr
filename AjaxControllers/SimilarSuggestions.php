<?php

/**
 * NEED advice on how to make this MVC compatible. Currently it doesn't seem to be so.
 * Given that I require the model(suggestions.php), yet I have to reload all the data from initial refresh.
 */
require_once('Controllers/suggestions.php');

class SimilarSuggestionsController extends AjaxController {
	//public $template = "tdidf";//Identical to search one.
	public $template = "Suggest";
	public function process($get,$post) {

		//header('Content-Type: application/json');
		//echo json_encode(array('foo' => 'bar'));
		$course_id = $post['course_id'];
		$Data = new Database();

		

		

		$Data->load();
		$DUMP = $Data->similarCourses($course_id,20);
		//echo $DUMP;
		$array = array();
		/*foreach($DUMP[1] as $word){
			 array_push($array,array('word'=> $word[0],'score'=>$word[1]));
		}*/
		$allCourses = array();
		foreach($DUMP[1] as $key => $value){
			//echo $key." ".$value;
			$otherCourse = new Course();
			$otherCourse->findById($key);

			array_push($array,array('word'=> $key,'coursename'=> $otherCourse->get('name'),'score'=>$value));
			$allCourses[$key] = $value;
			//echo $key;
		}
		//Get list of course_id's!!!

		//Do big loop and shit.

		//Call suggest.htm Ajaxtemplate
		/*
		$this->pageData['name'] = $course->get('name');
		$this->pageData['score'] = $DUMP[0];
		$this->pageData['SQL'] = $array;
		*/

		
		//$allcourses only contains the course id's
		$student = $Data->getStudent($_COOKIE['sessionId']);

		//getting classes taken from student model.
		$studentCoursesTaken = $student->getTaken();
		$studentCoursesAdded = $student->getAdded();

		//Here's the array of courses generated by the Jaccard index.
		//When we press suggest, it is different as it is explicitly stated we want a suggestion.



		//Getting major from model.
		$this->pageData['numResults'] = $student->getMajor();

		// Select all of the courses that this user is already added or ignored
		// Currently "ignored" is no longer a thing, so we ignore ignores for now. 
		// This takes all of those classes out of the suggestions.
		$idsAlreadyAdded = array_merge($studentCoursesTaken,$studentCoursesAdded);

		$advisoryArray = array();

		$query = new Query('sliders');
		// Select all the courses that are in this user's session and have this course id
		$result = $query->select('*', array(array('type', '=', "advised")), '');
		
		///echo count($result);
		foreach($result as $advisory){
			//echo $advisory->get('slider_id');
			//echo "<-<";
			array_push($advisoryArray,array('slider_id' => $advisory->get('id'),
			                                'slider_name' => $advisory->get('name'),
			                                'slider_type' => $advisory->get('type')
					  						)
			);
		}
		//Create new array containing all the course details based on what is in Allcourses, 
		//in a format that will be taken in by the view.
		$allNewCourses = array();
		
		foreach($allCourses as $id => $value){
			try{
				$course = $Data->getReturnArray($id,'course');
				if(!in_array($course['id'], $idsAlreadyAdded)){ // Check that this course has not been added by the user yet
					$dept = new department();
					$dept->findById($course['department_id']);
					array_push($allNewCourses, array('id' => $course['id'],
												  'name' => $course['name'],
												  'department_id' => $course['department_id'],
												  'department_name' => $dept->get('name'),
												  'department_code' => $dept->get('code'),
												  'number' => $course['number'],
												  'description' => $course['description'],//((strlen($course['description']==0)?'No description':$course['description'])),
												  'allTags' => array(array()),//$Data->courseTags($course->get('id')),//Should contain 5 tags.
												  'ratings' => $Data->rating($course['id']),
												  'stars' => $Data->requirement($course['id']),
												  'stack' => $advisoryArray//,
												  //'score' => $value
												  )
								);
				}
			}catch(Exception $e){}
		}
		$course = new Course();
		$course->findById($course_id);
		//Populate webpage with all the different courses that were predicted.
		if(!$Data->testConnection('courses')){
			$this->pageData['numResults'] = 0;
			$this->pageData['description'] = "No suggestions, Database Failed!";
			$this->pageData['allCourses'] = $allNewCourses;
			return true;
		}
		if(count($studentCoursesTaken) === 0){
			$this->pageData['numResults'] = (String)count($allCourses);
			$this->pageData['description'] = "Here are courses similar to ".$course->get('name')."!";
			$this->pageData['allCourses'] = $allNewCourses;
		}else{
			$this->pageData['numResults'] = (String)count($allNewCourses);
			$this->pageData['description'] = "Here are courses similar to ".$course->get('name')."!";
			$this->pageData['allCourses'] = $allNewCourses;
		}
		return true;
	}
}

?>